defmodule Euler.Multiples do
  @moduledoc false

  @doc """
    Question 1
    we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3,5,6, and 9.
    The sum of these multiples is 23.

    Find the sum of all the multiples of 3 or 5 below 1000.

  ## Examples

      iex> Euler.Multiples.solve()
      233168

  """
  @spec solve(non_neg_integer, non_neg_integer) :: non_neg_integer
  def solve(n \\ 999, sum \\ 0)
  def solve(0, sum), do: sum

  def solve(n, sum) do
    if n > 0 and (rem(n, 5) == 0 or rem(n, 3) == 0) do
      solve(n - 1, sum + n)
    else
      solve(n - 1, sum)
    end
  end
end

defmodule Euler.Fibonacci do
  @moduledoc false

  @doc """
    Question 2
    Each new term in the Fibonacci sequence is generated by adding the previous two terms.
    By starting with 1 and 2  the first 10 terms will be:

    1,2,3,5,8,13,21,34,55,89,...

    By considering the terms in the Fibonacci sequence whose values do not exceed four million,
    find the sum of the even-valued terms.

  ## Examples

      iex> Euler.Fibonacci.solve()
      233168

  """
  @spec solve(non_neg_integer(), non_neg_integer(), non_neg_integer()) :: non_neg_integer
  def solve(current \\ 2, previous \\ 1, sum \\ 0)

  def solve(current, previous, sum) do
    cond do
      rem(current, 2) == 0 and current < 4_000_000 ->
        solve(current + previous, current, sum + current)

      current < 4_000_000 ->
        solve(current + previous, current, sum)

      rem(current, 2) == 0 and current == 4_000_000 ->
        sum + current

      current >= 4_000_000 ->
        sum
    end
  end
end

defmodule Euler.LargestPrime do
  @moduledoc false

  @doc """
    Question 3
    The prime factors of 13195 are 5,7,13 and 29.

    What is the largest prime factor of the number 600_851_475_143?

    ## Examples

    iex> Euler.LargestPrime.solve()
    6857
  """
  @spec solve(non_neg_integer) :: non_neg_integer
  def solve(n \\ 600_851_475_143) do
    n
    |> :math.sqrt()
    |> trunc()
    |> (&(&1..2)).()
    |> Enum.filter(&(rem(n, &1) == 0 && check_prime(&1)))
    |> Enum.take(1)
    |> hd()
  end

  defp check_prime(x) do
    2..(x - 1) |> Enum.all?(&(rem(x, &1) != 0))
  end
end

defmodule Euler.Palindrone do
  @moduledoc false

  @doc """
    Question 4
    A palindromic number reads the same both ways. The largest palindrome made from the
    product of two 2-digit numbers is 9009 = 91 x 99.

    Find the largest palindrome made from the product of two 3-digit numbers.

    ## Examples

    iex> Euler.Palindrone.solve()
    906609
  """
  def solve() do
    for x <- 999..900, y <- 999..900, x > y do
      (x * y)
      |> Integer.to_string()
      |> check_string
      |> Enum.all?(&(&1 === true)) && x * y
    end
    |> Enum.filter(&(&1 !== false))
    |> hd()
  end

  defp check_string(string) do
    length = string |> String.length() |> (&(&1 / 2)).() |> trunc()

    for x <- 0..(length - 1) do
      String.at(string, x) === String.at(string, String.length(string) - (x + 1))
    end
  end
end

defmodule Euler.SmallestMultiple do
  @moduledoc false

  @doc """
    Question 5
    2520 is the smallest number that can be divided by each of the numbers from
    1 to 10 without any remainder.

    What is the smallest positive number that is evenly divisible by all of the
    numbers from 1 to 20?

    ## Examples

    iex> Euler.SmallestMultiple.solve()
    232792560
  """
  @spec solve(non_neg_integer) :: non_neg_integer
  def solve(num \\ 20) do
    20..11
    |> Enum.all?(&(rem(num, &1) === 0))
    |> (&(if &1 do
            num
          else
            solve(num + 20)
          end)).()
  end
end

defmodule Euler.SumSquareDifference do
  @moduledoc false

  @doc """
    Question 6
    The sum of the squares of the first ten natural numbers is 385,
    The square of the sum of the first ten natural numbers is 3025,
    Hence the difference between the sum of the squares of the first
    ten natural numbers and the square of the sum is 3025 - 385 = 2640.

    Find the difference between the sum of the squares of the first one
    hundred natural numbers and the square of the sum.

    ## Examples

    iex> Euler.SumSquareDifference.solve()
    25164150
  """
  @spec solve(number, number, number) :: number
  def solve(num \\ 1, sum \\ 0, square \\ 0)
  def solve(101, sum, square), do: trunc(:math.pow(square, 2) - sum)

  def solve(num, sum, square) do
    solve(num + 1, sum + :math.pow(num, 2), square + num)
  end
end

defmodule Euler.GetNumberedPrime do
  @moduledoc false

  @doc """
    Question 7
    By listing the first six prime numbers:
    2, 3, 5, 7, 11, and 13,
    we can see that the 6th prime is 13.

    What is the 1001st prime number?

    ## Examples

    iex> Euler.GetNumberedPrime.solve()
    25164150
  """
  @spec solve(non_neg_integer, list(non_neg_integer), non_neg_integer) :: non_neg_integer
  def solve(num \\ 3, factors \\ [2], count \\ 1)
  def solve(_, factors, 10001), do: hd(factors)

  def solve(num, factors, count) do
    if Enum.all?(factors, &(rem(num, &1) !== 0)) do
      solve(num + 2, [num | factors], count + 1)
    else
      solve(num + 2, factors, count)
    end
  end
end

defmodule Euler.LargestProductInSeries do
  @moduledoc false

  @series File.read("./lib/Michael/series.txt")
          |> (fn {:ok, data} -> String.graphemes(data) end).()

  @doc """
    Question 8
    The four adjacent digits in the following 1000-digit number that have the
    greatest product are 9 x 9 x 8 x 9 = 5832

    Series: <See series.txt>

    Find the thirteen adjacent digits in the 1000 digit number that have
    the greatest produc. What is the value of this product

    ## Examples

    iex> Euler.LargestProductInSeries.solve()
    25164150
  """

  def solve() do
    @series
    |> Enum.map(&Integer.parse(&1))
    |> Enum.map(fn {num, ""} -> num end)
    |> (&[0 | &1]).()
    |> maxProduct()
  end

  defp maxProduct(list, max \\ 0)
  defp maxProduct([_ | []], max), do: max

  defp maxProduct([_ | tail], max) do
    product =
      tail
      |> Enum.take(13)
      |> Enum.reduce(fn x, acc -> x * acc end)
      |> (&(if max > &1 do
              max
            else
              &1
            end)).()

    maxProduct(tail, product)
  end
end

defmodule Euler.PythagoreanTriplet do
  @doc """
    Question 9
    A Pythagorean triplet is a set of natural numbers: a < b < c, such that

    a^2 + b^2 = c^2,

    for example, 3^2 + 4^2 = 9 + 16 = 25 = 5^2

    There exists exactly one Pythagorean triplet for which a + b + c = 1000
    find the product abc

    ## Examples

    iex> Euler.PythagoreanTriplet.solve()
    31875000
  """
  def solve() do
    for c <- 1..1000,
        b <- 1..(c - 1),
        a <- 1..(b - 1),
        a + b + c === 1000,
        :math.pow(c, 2) == :math.pow(b, 2) + :math.pow(a, 2) do
      a * b * c
    end
    |> hd()
  end
end

defmodule Euler.SummationOfPrimes do
    @doc """
    Question 10

    The sum of the primes below 10 is 2 + 5 + 7 = 17.

    Find the sum of all the primes below two million

    Result: this is extremely slow and should be fixed later
    142913828922

    ## Examples

    iex> Euler.SummationOfPrimes.solve()
    142913828922
  """
  def solve(num \\ 3, factors \\ [2])
  def solve(num, factors) when num <= 2_000_000 do
    if Enum.all?(factors, &(rem(num, &1) !== 0)) do
      solve(num + 2, [num | factors])
    else
      solve(num + 2, factors)
    end
  end
  def solve(_, factors), do: Enum.reduce(factors, fn x, acc -> x + acc end)
end
